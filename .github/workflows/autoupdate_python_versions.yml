name: Autoupdate Python Versions
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  # Or if the "scripts" directory is modified
  push:
    paths:
      - 'scripts/**'
      - '.github/workflows/autoupdate_python_versions.yml'

env:
  MAIN_PYTHON_VERSION: '3.12'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  autoupdate-python-versions:
    name: Autoupdate Python Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Set up Python ${{ env.MAIN_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Run the autoupdate script
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          python scripts/update_python_versions.py

      - name: Commit changes (if any)
        run: |
          # Configure git username & email
          git config user.name 'pyansys-ci-bot'
          git config user.email 'pyansys.github.bot@ansys.com'
          echo "User configured as $(git config user.name) <$(git config user.email)>"

          # Run git diff command and store the exit code
          git diff --exit-code > /dev/null
          diff_code=$?
          echo "git diff command exited with code $diff_code"

          # If there are changes, verify whether the branch 'feat/update-python-version' exists
          # If it does, switch to it, rebase it on top of the main branch, and push the changes
          # If it doesn't, create the branch, commit the changes, and push the branch
          if [ $diff_code -ne 0 ]; then
            if git show-ref --verify --quiet refs/heads/feat/update-python-version; then
              echo "Branch 'feat/update-python-version' exists. Switching to it, rebasing on top of the main branch, and pushing the changes."
              git checkout feat/update-python-version
              git rebase main
            else
              echo "Branch 'feat/update-python-version' does not exist. Creating it, committing the changes, and pushing the branch."
              git checkout -b feat/update-python-version
            fi

            echo "Committing the changes..."
            git add .
            git commit -m "chore: update Python versions"

            echo "Pushing the changes..."
            git push origin feat/update-python-version
          fi

          # If there are changes, create a pull request
          if [ $diff_code -ne 0 ]; then
            echo "Creating a pull request..."
            gh pr create --title "chore: update Python versions" --body "This PR updates the Python versions in the CI configuration files." --base main --head feat/update-python-version
          fi