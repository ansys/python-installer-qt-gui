name: GitHub CI
on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.11'
  DOCUMENTATION_CNAME: 'installer.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-tools-installer'
  LIBRARY_NAMESPACE: 'ansys.tools.installer'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions: write-all
jobs:

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: "Tests"
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DISPLAY: ':99'
    steps:
      - name: Install Linux os dependencies
        if: runner.os == 'Linux'
        run: sudo apt install libegl1

      - name: Setup headless display
        uses: pyvista/setup-headless-display-action@v2

      - uses: ansys/actions/tests-pytest@v5
        with:
          python-version: ${{ matrix.python-version }}

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: Build project documentation
        uses: ansys/actions/doc-build@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          dependencies: "libegl1"

  doc-deploy:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [doc-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: ansys/actions/doc-deploy-dev@v5
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-application:
    name: "Build Application"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install Dependencies
        run: pip install -e .[freeze]

      - name: Freeze application
        run: pyinstaller frozen.spec

      - name: Install NSIS
        run: choco install nsis -y

      - name: Print NSIS version
        run: makensis -VERSION

      - name: Run NSIS
        shell: pwsh
        if: always()
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          makensis setup.nsi

      - name: List output
        run: ls -R dist

      - uses: actions/upload-artifact@v4
        with:
          name: Python-Installer
          path: dist/*Setup*.exe

  build-application-linux-20-04:
    name: "Build Application Linux - 20.04"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cleanup Repo
        run: |
          rm -rf src/ansys/tools/installer/assets/python-asset/22.04

      - name: Install Linux Dependencies
        run: |
          sudo apt update
          sudo apt install aptitude;
          sudo aptitude install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-cursor-dev libxcb-util-dev libxcb-xkb-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev -y
          sudo apt install ruby
          sudo gem install fpm
          sudo add-apt-repository ppa:okirby/qt6-backports -y
          sudo apt update
          sudo apt install qt6-base-dev -y

          wget http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi8_3.4.2-4_amd64.deb
          sudo apt install ./libffi8_3.4.2-4_amd64.deb

          wget http://archive.ubuntu.com/ubuntu/pool/main/w/wayland/libwayland-client0_1.20.0-1_amd64.deb
          sudo apt install ./libwayland-client0_1.20.0-1_amd64.deb

      - name: Install Dependencies
        run: pip install -e .[freeze]

      - name: Freeze application
        run: pyinstaller frozen.spec

      - name: Setup and Copy Linux files for packaging
        run: |
          mkdir -p package/opt
          mkdir -p package/share/applications
          mkdir -p package/share/icons
          cp -r dist/ansys_python_manager package/opt/ansys_python_manager
          cp src/ansys/tools/installer/assets/pyansys_icon.svg package/share/icons/pyansys_icon.svg
          cp linux/debian/ansys_python_manager_prebuid.desktop package/share/applications
          find package/opt/ansys_python_manager -type f -exec chmod 644 -- {} +
          find package/opt/ansys_python_manager -type d -exec chmod 755 -- {} +
          find package/share -type f -exec chmod 644 -- {} +
          chmod +x package/opt/ansys_python_manager/ansys_python_manager
          version=v`cat ./src/ansys/tools/installer/VERSION`
          echo "APPLICATION_VERSION=$version" >> $GITHUB_ENV
          fpm -v $version --fpm-options-file linux/debian/fpm-options-debian

      - name: Create zip file
        run: |
            cp linux/debian/installer.sh installer.sh
            cp linux/debian/postInstallScript.sh postInstallScript.sh
            chmod +x installer.sh postInstallScript.sh ansys_python_manager.deb
            ls -l
            zip -r Ansys-Python-Manager_linux_20_04_${{ env.APPLICATION_VERSION }}.zip ansys_python_manager.deb installer.sh postInstallScript.sh

      - uses: actions/upload-artifact@v4
        with:
          name: Python-Installer-20.04
          path: |
            Ansys-Python-Manager_linux_20_04_${{ env.APPLICATION_VERSION }}.zip
            linux/manual_build/*.zip

  build-application-linux-22-04:
    name: "Build Application Linux - 22.04"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Cleanup Repo
        run: |
          rm -rf src/ansys/tools/installer/assets/python-asset/20.02

      - name: Install Linux Dependencies
        run: |
          sudo apt update
          sudo apt install aptitude -y;
          sudo aptitude install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-cursor-dev libxcb-util-dev libxcb-xkb-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev -y
          sudo apt install ruby -y
          sudo gem install fpm

      - name: Install Dependencies
        run: pip install -e .[freeze]

      - name: Freeze application
        run: pyinstaller frozen.spec

      - name: Setup and Copy Linux files for packaging
        run: |
          mkdir -p package/opt
          mkdir -p package/share/applications
          mkdir -p package/share/icons
          cp -r dist/ansys_python_manager package/opt/ansys_python_manager
          cp src/ansys/tools/installer/assets/pyansys_icon.svg package/share/icons/pyansys_icon.svg
          cp linux/debian/ansys_python_manager_prebuid.desktop package/share/applications
          find package/opt/ansys_python_manager -type f -exec chmod 644 -- {} +
          find package/opt/ansys_python_manager -type d -exec chmod 755 -- {} +
          find package/share -type f -exec chmod 644 -- {} +
          chmod +x package/opt/ansys_python_manager/ansys_python_manager
          version=v`cat ./src/ansys/tools/installer/VERSION`
          echo "APPLICATION_VERSION=$version" >> $GITHUB_ENV
          fpm -v $version --fpm-options-file linux/debian/fpm-options-debian

      - name: Create zip file
        run: |
          cp linux/debian/installer.sh installer.sh
          cp linux/debian/postInstallScript.sh postInstallScript.sh
          chmod +x installer.sh postInstallScript.sh ansys_python_manager.deb
          ls -l
          zip -r Ansys-Python-Manager_linux_22_04_${{ env.APPLICATION_VERSION }}.zip  ansys_python_manager.deb installer.sh postInstallScript.sh

      - uses: actions/upload-artifact@v4
        with:
          name: Python-Installer-22.04
          path: Ansys-Python-Manager_linux_22_04_${{ env.APPLICATION_VERSION }}.zip

  sign-application:
    name: Sign application
    needs: [build-application]
    runs-on:
      group: ansys-network
      labels: [self-hosted, Windows, signtool]
    steps:
      - name: Checkout the SignTool
        uses: actions/checkout@v4
        with:
          repository: ansys-internal/signtool-ansys-apps
          token: ${{ secrets.SIGNTOOL_ACCESS_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          name: Python-Installer
          path: signtool/installer

      - name: List current structure
        run: ls -R

      - name: Sign application
        working-directory: signtool
        run: |
          $filename = (get-ChildItem installer -recurse | where {$_.name -like "*Setup*"}).Name
          $jobname = $filename -replace ".{4}$"
          dotnet signclient.dll sign `
            -r ansyssigning@ansys.com `
            -s '${{ secrets.SIGNTOOL_PWD }}' `
            -c AppSettings.json `
            -n $jobname `
            -i installer/$filename

      - uses: actions/upload-artifact@v4
        with:
          name: Python-Installer-Signed
          path: signtool/installer/*Setup*.exe

  release:
    name: Release application
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [sign-application,build-application-linux-20-04, build-application-linux-22-04]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Python-Installer-Signed
          path: installer-signed

      - uses: actions/download-artifact@v4
        with:
          name: Python-Installer
          path: installer

      - uses: actions/download-artifact@v4
        with:
          name: Python-Installer-22.04
          path: installer

      - uses: actions/download-artifact@v4
        with:
          name: Python-Installer-20.04
          path: installer

      - name: Display structure of downloaded files
        run: ls -R

      - name: Rename unsigned exe
        run: |
          cd installer
          for filename in *.exe; do mv "$filename" "Unsigned_${filename}"; done;
          cd -

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer/*.zip
            installer/linux/manual_build/*.zip
            installer-signed/*.exe
            installer/*.exe
          generate_release_notes: true

  doc-deploy-release:
    name: Upload release documentation
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release, doc-build]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v5
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          